package org.lemanoman.mqttdatalogger;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.lemanoman.mqttdatalogger.model.CollectorModel;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.text.SimpleDateFormat;
import java.util.Date;

public class HouseChart implements OnChangeStatus {
    private JPanel panelQuartoA;
    private JPanel panelBanheiroA;
    private JPanel panelQuartoB;
    private JPanel panelQuartoC;
    private JPanel panelSala;
    private JPanel panelBanheiroB;
    private JPanel panelCozinha;
    private JPanel mainPanel;
    private JLabel labelQuartoA;

    private final SimpleDateFormat time = new SimpleDateFormat("HH:mm:ss");

    public HouseChart() {


    }


    private void initJPanel(JPanel jPanel, String title) {
        if (jPanel != null) {
            jPanel.setLayout(new FlowLayout());
            JPanel subPanel = new JPanel();
            subPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
            subPanel.setLayout(new BoxLayout(subPanel, BoxLayout.Y_AXIS));
            subPanel.add(getFormattedTitle(title));
            subPanel.add(getFormattedSubTitle("N/D"));
            jPanel.add(subPanel);
        }
    }

    public void init() {

        initJPanel(panelBanheiroA, "Banheiro A");
        initJPanel(panelBanheiroB, "Banheiro B");
        initJPanel(panelQuartoA, "Quarto A");
        initJPanel(panelQuartoB, "Quarto B");
        initJPanel(panelQuartoC, "Quarto C");
        initJPanel(panelSala, "Sala");
        initJPanel(panelCozinha, "Cozinha");
    }

    public void onChangeTemperature(CollectorModel collectorModel) {
        if (collectorModel.getHeaderName().equals("temperature")) {
            if (collectorModel.getIdDevice().equals(0)) {
                updateJPanel(panelQuartoB, collectorModel.getValue());
            }
            if (collectorModel.getIdDevice().equals(1)) {
                updateJPanel(panelQuartoC, collectorModel.getValue());
            }
            if (collectorModel.getIdDevice().equals(2)) {
                updateJPanel(panelSala, collectorModel.getValue());
            }
            if (collectorModel.getIdDevice().equals(3)) {
                updateJPanel(panelQuartoA, collectorModel.getValue());
            }
        }
    }

    private void updateJPanel(JPanel panel, Double value) {
        panel.setBackground(getColor(value));
        for (Component component : ((JPanel) panel.getComponent(0)).getComponents()) {
            if (component instanceof JLabel) {
                JLabel label = (JLabel) component;
                if ("subtitle".equals(label.getName())) {
                    label.setText(value + "CÂº - " + time.format(new Date()));
                }
            }
        }


    }


    private Color getColor(Double value) {
        if (value < 20) {
            return Color.decode("#34baeb");
        }
        if (value >= 20 && value < 22) {
            return Color.decode("#34eb86");
        }
        if (value >= 22 && value < 24) {
            return Color.decode("#56eb34");
        }
        if (value >= 24 && value < 26) {
            return Color.decode("#baeb34");
        }
        if (value >= 26 && value < 28) {
            return Color.decode("#ebd934");
        }
        if (value > 28) {
            return Color.decode("#eb8634");
        }
        return Color.decode("#34baeb");
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    public void setMainPanel(JPanel mainPanel) {
        this.mainPanel = mainPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 6, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelQuartoA = new JPanel();
        panelQuartoA.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        panel1.add(panelQuartoA, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelQuartoA.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        panelSala = new JPanel();
        panelSala.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        mainPanel.add(panelSala, new GridConstraints(1, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelSala.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        panelCozinha = new JPanel();
        panelCozinha.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        mainPanel.add(panelCozinha, new GridConstraints(1, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelCozinha.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        panelQuartoC = new JPanel();
        panelQuartoC.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        mainPanel.add(panelQuartoC, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelQuartoC.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        panelBanheiroB = new JPanel();
        panelBanheiroB.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        mainPanel.add(panelBanheiroB, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelBanheiroB.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        panelQuartoB = new JPanel();
        panelQuartoB.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        mainPanel.add(panelQuartoB, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelQuartoB.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        panelBanheiroA = new JPanel();
        panelBanheiroA.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panelBanheiroA, new GridConstraints(0, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panelBanheiroA.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private JLabel getFormattedTitle(String initialText) {
        JLabel label = new JLabel();
        label.setName("title");
        label.setFont(new Font("Lucida Sans Typewriter", Font.PLAIN, 28));
        label.setText(initialText);
        return label;
    }

    private JLabel getFormattedSubTitle(String initialText) {
        JLabel label = new JLabel();
        label.setName("subtitle");
        label.setFont(new Font("Lucida Sans Typewriter", Font.PLAIN, 15));
        label.setText(initialText);
        return label;
    }

}
